.. _platformer-slide-page:

Platformer Slide
================

This component is used to perform platformer slides. 

By slide we mean slighlity faster movement than it's normal movement respecting being on the ground. This 
if different from a dash because it can't be performed on air and can only be executed horizontally. No vertical
or diagonal movement allowed.

Category
--------

.. table:: 
   :width: 100% 
   :widths: 100

   +-----------------------------------------------------------------------------------------------------+
   | Learnable                                                                                           |
   +-----------------------------------------------------------------------------------------------------+

What it Implements
------------------

.. table:: 
   :width: 100% 
   :widths: 100

   +-----------------------------------------------------------------------------------------------------+
   | **Interface**                                                                                       |
   +-----------------------------------------------------------------------------------------------------+
   | :ref:`IPlatformerSlidePerformer <i-platformer-slide-performer-page>`                                |
   +-----------------------------------------------------------------------------------------------------+

Setup
-----

.. toctree::
   :maxdepth: 1
   
   setups/platformer-slide-setup 

Inspector
---------  

* Debug On - For visual feedback while detecting ceilings

* Sliding Collider - It will be 
  from this collider that the ability will check if it can stop sliding based on what is considered 
  ceiling in order to prevent being stuck. You can also feed this via script

* What is Ceiling - A `LayerMask <https://docs.unity3d.com/ScriptReference/LayerMask.html>`_ telling what is considered "ceiling".

* Colliders to Disable - An optional list of ``Collider2D`` that should be disabled while performing. Usefull when dealing with multiple colliders
  for your character.

* Ceiling Detection Length - A float representing the lengh of the casted ray to detect if it is under 
  anything considered "ceiling" before stoping the slide.  

* Perform Approach - You can mark ``Auto Perform`` checkbox and the component will perform automatically upon 
  self resolving jump requests and stops. In case you are working with an FSM (we have one, checkout  our :ref:`FSM solution <welcome-core-fsm-page>`) 
  you might want your state to call the ``Perform()`` and ``PerformExtraJump()`` methods.


Feeding Dependencies
--------------------

Below you will find what you should feed this component with and how. You can always do it by directly accessing its methods 
or having components wich provide what they need and mark this component to seek for them through the inspector window.

Slide Handler
*************

This component needs to told when to perform its slides. So you will need a component to do that.

You can use the ``Request()``, ``Stop()``, methods as seen below on the "How to use" section.
You also can mark it to seek for an :ref:`IPlatformerSlideHandler <i-platformer-slide-handler-page>` as long as it has some 
component wich implements it among its ``GameObject`` other components. If you opt to do so, the IPlatformerSlideHandler component will 
take care of calling the ``Request()`` and ``Stop()`` methods when needed.

Movement Performer
******************

In order to move on the x while performing, this component will need a platformer movement performer.

You can directly set one: ``slide.MovementPerformer = movementPerformer``. As long as movementPerformer implements the 
:ref:`IPlatformerMovementPerformer <i-platformer-movement-performer-page>` interface. 
Or you can mark the component to seek for an 
:ref:`IPlatformerMovementPerformer <i-platformer-movement-performer-page>` as long as it has some component wich implements 
it among its ``GameObject`` other components. 

Our :ref:`Platformer Dynamic Movement <platformer-dynamic-movement-page>` implements it.

Grounding
*********

This component needs to know if its ``GameObject`` can be considered grounded to start and interrupt sliding.

You can use the ``UpdateGrounding(bool newGrounding)`` method every update or mark the component to seek for an 
:ref:`IPlatformerGroundingProvider <i-platformer-grounding-provider-page>` as long as it has some component wich implements 
it among its ``GameObject`` other components. Our :ref:`Platformer Raycast Grounding Checker <platformer-raycast-grounding-checker-page>` implements it.


Facing Direction
****************

This component needs to know what direction its ``GameObject`` is facing in order to setup the slide correctly
and move into the correct direction.

You can use the ``UpdateFacingDirectionSign(float newFacingDirectionSign)`` method every update or mark the component to seek for an 
:ref:`IPlatformerFacingDirectionProvider <i-platformer-facing-direction-provider-page>` as long as it has some component wich implements 
it among its ``GameObject`` other components. Our :ref:`PlatformerFlip <platformer-flip-page>` implements it.

Usage
-----

Here is how you can use this component:

Direct approach
***************

.. code-block:: csharp

    PlatformerSlide slide;

    void Awake() 
    {
        slide = GetComponent<PlatformerSlide>();
    }

    void Update() 
    {
        if (Input.GetButtonDown("Slide")) // This assumes you've mapped a sliding button
        {
            slide.Request();
        }

        if (Input.GetButtonUp("Slide")) // This assumes you've mapped a sliding button
        {
            slide.Stop();
        }
    }

    void FixedUpdate()
    {
        if (slide.sliding)  // In case it is not set to auto perform
        {
            slide.Perform();
        }
    }

Requesting slides using :ref:`IPlatformerSlidePerformer <i-platformer-slide-performer-page>` interface
******************************************************************************************************

.. code-block:: csharp

    IPlatformerSlidePerformer slidePerformer;

    void Awake()
    {
        slidePerformer = GetComponent<IPlatformerJumpPerformer>();    
    }

    void Update() 
    {
        if (Input.GetButtonDown("Slide")) // Example on how to get input. We can't really know how is your input setup
        {
            slidePerformer.Request();
        }
    }

    void FixedUpdate()
    {
        if (slidePerformer.Performing) // In case it is not set to auto perform
        {
            slidePerformer.Perform();
        }
    }

Listening to :ref:`IPlatformerSlidePerformer <i-platformer-slide-performer-page>` interface events
**************************************************************************************************

.. code-block:: csharp

    IPlatformerSlidePerformer slidePerformer;

    void Awake()
    {
        slidePerformer = GetComponent<IPlatformerSlidePerformer>();      
    }

    void Start()
    {
        slidePerformer?.SlideUpdate.AddListener(OnSlideUpdate);
    }

    void OnDisable()
    {
        slidePerformer?.SlideUpdate.RemoveListener(OnSlideUpdate);
    }
    
    void OnSlideUpdate(bool isSliding)
    {
        // Your logic
    }

.. note::

    You can also use the direct approach to listen to the events.

Locking Slides
--------------

Use the method ``Lock(bool shouldLock)`` to prevent or allow slides to be performed. Great to be used with FSMs 
when entering and leaving states on wich slides should not be started.

Available Properties
--------------------

.. code-block:: csharp

    public bool Performing { get; }
    public bool Locked { get; }

    public IPlatformerSlideHandler SlideHandler { get; set; }
    public IPlatformerMovementPerformer MovementPerformer { get; set; }
    public IPlaftormerGroundingProvider GroundingProvider { get; set; }
    public IPlatformerFacingDirectionProvider HorizontalDirectionProvider { get; set; }

    public LayerMask WhatIsCeiling { get; set; }

Available Methods
-----------------

.. code-block:: csharp

    /// <summary>
    /// Call this to request a Slide.
    /// </summary>
    /// <param name="directionSign"></param>
    public void Request(float directionSign)

    /// <summary>
    /// Should be called on Fixed (Physics) Update.
    /// </summary>
    public void Perform()

    /// <summary>
    /// Stops slide in progress if any.
    /// </summary>
    public void Stop()
    
    /// <summary>
    /// Call this in order to Lock slide and
    /// prevent new slides to occur based on
    /// shouldLock boolean.
    /// </summary>
    /// <param name="shouldLock"></param>
    public void Lock(bool shouldLock)

    /// <summary>
    /// Call this to update grouding
    /// </summary>
    /// <param name="newGrounding"></param>
    public void UpdateGronding(bool newGrounding)

    /// <summary>
    /// Call this to update facing direction sign. -1 for left, 1 for right.
    /// </summary>
    /// <param name="newFacingDirectionSign"></param>
    public void UpdateFacingDirectionSign(float newFacingDirectionSign)