.. _platformer-slope-checker-page:

Platformer Slope Checker
========================

This component is used to check if a ``GameObject`` can be considered stading on a slope.

You can configure and debug slopes detection through the Unity's inspector.

What it Requires
----------------

Through Unity's inspector you will need to inform what layers of your project should be considered ground. 

A ``Collider2D`` is required. It might be a ``BoxCollider2D``, a ``CapsuleCollider2D`` or even a ``CircleCollider2D``. You can directly 
specify one (pretty handy in case you are using multiple colliders). If no ``Collider2D`` is provided the component will try finding one. 

.. important::

   If you are working with multiple colliders be sure to specify one. Otherwise the wrong one might be used instead.

What it Implements
------------------

.. table:: 
   :width: 100% 
   :widths: 100

   +-----------------------------------------------+
   | **Interface**                                 |
   +-----------------------------------------------+
   | ``ISlopeDataProvider``                        |
   +-----------------------------------------------+

What it Provides
----------------

Properties
**********

You can directly access the public properties listed below and benefit from its information.

.. code-block:: csharp

   public bool OnSlope;
   public SlopeData Data;

Events
******

You can add listeners through code or inspector to be updated every physics update about the 
``GameObject`` being on a slope. 

.. code-block:: csharp

   public UnityEvent<SlopeData> SlopeDataUpdate;

.. note::

   If you are not familiar on how to use Unity Events `check out the oficial docs <https://docs.unity3d.com/Manual/UnityEvents.html>`_ .   

Checkout what is the :ref:`SlopeData <slope-data>` composed of for more information about how it can be usefull to you.

Seeks For
---------

Below you will find what you should feed this component with and how. You can always do it by directly accessing its methods 
or having components wich provide what they need and mark this component to seek for them through the inspector window.

Facing Direction
****************

This component needs to know what direction is considered to its ``GameObject`` to be facing when it runs the slope check.

You can use the ``UpdateFacingDirection(newFacingDirection)`` method every update or mark the component to seek for an 
``IPlatformerHorizontalDirectionProvider`` as long as it has some component wich implements it among its ``GameObject`` other 
components. Our :ref:`PlatformerFlip <platformer-flip-page>` implements it.

Grounding
*********

This component needs to know if its ``GameObject`` can be considered grounded when it runs the slope check.

You can use the ``UpdateGrounding(newGrounding)`` method every update or mark the component to seek for an 
``IPlatformerGroundingProvider`` as long as it has some component wich implements 
it among its ``GameObject`` other components. Our :ref:`Platformer Raycast Grounding Checker <platformer-raycast-grounding-checker-page>` implements it.

.. _slope-data:

SlopeData
-----------

.. code-block:: csharp

   namespace Handy2DTools.CharacterController.Checkers
   {
      public class SlopeData
      {
         /// <summary>
         /// Means the object is standing on a slope
         /// </summary>
         public bool onSlope;

         /// <summary>
         /// Means the slope the object is standing on has a higher angle
         /// then what it is allowed to walk on
         /// </summary>
         public bool higherThanMax;

         /// <summary>
         /// The Normal perpendicular to the slope
         /// </summary>
         public Vector2 normalPerpendicular;

         /// <summary>
         /// If the object is ascending
         /// </summary>
         public bool ascending;

         /// <summary>
         /// If the object is descending
         /// </summary>
         public bool descending;

         /// <summary>
         /// If Exiting from above the slope
         /// </summary>
         public bool exitingFromAbove;

         /// <summary>
         /// If exiting from below the slope
         /// </summary>
         public bool exitingFromBelow;
      }
   }



